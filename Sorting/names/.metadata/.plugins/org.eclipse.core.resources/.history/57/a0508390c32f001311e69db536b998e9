import java.awt.List;


public class ImmutableList {

	private final Object data;
	private final ImmutableList next;
	private ImmutableList val;
	public static final ImmutableList NIL = new ImmutableList(null, null);

	
	
	private ImmutableList(Object d, ImmutableList n){
		data = d;
		next = n;
		this.val = new ImmutableList ((Comparable)d, n.val);
	}
	
	public static ImmutableList immutableList (Object d){
		return new ImmutableList (d, ImmutableList.NIL);
	}
	
	public ImmutableList push (Object d){
		return new ImmutableList(d, this);
	}
	
	public Object head (){
		return data;
	}
	
	public ImmutableList tail (){
		return next;
	}
	
	public boolean isEmpty() {
		return this == ImmutableList.NIL;
	}
	
	public int length(){
		if (this.isEmpty()){
			return 0;
		}
		else{
			return 1 + this.tail().length();
		}
	}
	
	public ImmutableList find (Object d){
		if (this.isEmpty() || d.equals(this.head())){
			return this;
		}
		else{
			return this.tail().find(d);
		}
	}
	
	public ImmutableList append (ImmutableList that){
		if (this.isEmpty()){
			return that;
		}
		else{
			return this.tail().append(that).push(this.head());
		}
	}
	
	public ImmutableList reverse (){
		if (this.isEmpty()){
			return ImmutableList.NIL;
		}
		else{
			return this.tail().reverse().append
			(ImmutableList.immutableList(this.head()));
		}
	}
	
	public Object nth(int n){
		if (this.isEmpty() || n<0){
			return null;
		}
		else if(n==0){
			return this.head();
		}
		else{
			return this.tail().nth(n-1);
		}
	}
	
	public ImmutableList delete(Object d){
		if (this.isEmpty()){
			return this;
		}
		else if (d==this.head()){
			return this.tail().delete(d);
		}
		else{
			return this.tail().delete(d).push(this.head());
		}
	}
	
	public ImmutableList insert (Comparable d){
		if (this.isEmpty() || (d.compareTo(this.head()))<0){
			return this.push(d);
		}
		else{
			return this.tail().insert(d).push(this.head());
		}
	}
	
	public String toString(){
		if (this.isEmpty()){
			return "()";
		}
		else{
			return "( " + this.head().toString()
					+ (this.tail().isEmpty() ? "" : " ")
					+ this.tail().toString().substring(1);
		}
	}
	
	public static ImmutableList parseList (String s){
		int openBracket = s.indexOf('(');
		int closeBracket = s.indexOf(')');
		if (openBracket!=0 || closeBracket != s.length()-1){
			throw new IllegalArgumentException(s);
		}
		
		String[] intStrings =
				s.substring(openBracket+1, closeBracket).split(" ");
		ImmutableList result = ImmutableList.NIL;
		for (int i = intStrings.length-1; i>=0 ; i--){
			result = result.push(Integer.parseInt(intStrings[i]));
		}
		return result;
	}
	
	public ImmutableList purge(){
		
	}
	
	public ImmutableList sort(){
		if (this.isEmpty()){
			return this;
		}
		else{
			
		}
	}
	
	public void merge(int top1, int top2, int out){
		Object[] temp = new Object[this.length()];
		int i = top1;
		int j = top2;
		int k = 0;
		
		while (i<top2 && j<out){
			if (((Comparable) this.val.nth(i)).compareTo
					(this.val.nth(j))<0){
				temp[k++] = this.nth(i);	
			}
			else{
				temp[k++] = this.nth(j);
			}	
		}
		
		while (i<top2){
			temp[k++] = this.val.nth(i++);
		}
		while (j<out){
			temp[k++] = this.val.nth(j++);
		}
		
		for (k=0; k<temp.length; k++){
			this.val.push(temp[k]);
		}
	}
	
}

